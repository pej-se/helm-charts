apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.global.replicaCount }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        {{- include "app.pejAnnotations" . | nindent 8 }}
        {{- if .Values.global.prometheus.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/path: "{{ .Values.global.prometheus.path }}"
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        {{- end }}
        {{- with .Values.global.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "app.serviceAccountName" . }}
      {{- with .Values.global.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ include "app.name" . }}
          {{- with .Values.global.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.global.image.name }}:{{ .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          env:
          {{- range $k, $v := .Values.global.env }}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
          {{- end }}
          {{- range $secretName, $keys := .Values.global.secrets }}
            {{- range $k, $v := $keys }}
            - name: {{ $k | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName | quote }}
                  key: {{ $v | quote }}
            {{- end }}    
          {{- end }}
          ports:
            {{- range .Values.global.service.ports }}
            - containerPort: {{ .port }}
              name: {{ .name }}
            {{- end }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.global.healthProbe.initialDelaySeconds }}
            httpGet:
              path: {{ .Values.global.healthProbe.liveness }}
              port: {{ .Values.global.healthProbe.port }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.global.healthProbe.initialDelaySeconds }}
            httpGet:
              path: {{ .Values.global.healthProbe.readiness }}
              port: {{ .Values.global.healthProbe.port }}
          resources:
            {{- toYaml .Values.global.resources | nindent 12 }}
          volumeMounts:
            {{- range $volumeMountName, $keys := .Values.global.volumeMounts }}
            - name: {{$volumeMountName}}
              mountPath: {{$keys.mountPath}}
            {{- end }}
        {{- if .Values.global.cloudSqlProxy.enabled }}
        - name: cloud-sql-proxy
          image: "gcr.io/cloud-sql-connectors/cloud-sql-proxy:{{ .Values.global.cloudSqlProxy.tag }}"
          command:
            - "--private-ip"
            - "--port=5432"
            - "{{ .Values.global.cloudSqlProxy.instance }}"
          securityContext:
            runAsNonRoot: true
          resources:
            {{- toYaml .Values.global.cloudSqlProxy.resources | nindent 12 }}
        {{- end }}
        {{- with .Values.global.extraContainers }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        {{- range $volumeName, $keys := $.Values.global.volumes }}
        - name: {{$volumeName}}
        {{- if $keys.configMapName }}
          configMap:
            name:  {{$keys.configMapName}}
        {{- end }}
        {{- if $keys.secretName }}
          secret:
            secretName: {{$keys.secretName}} 
        {{- end }}
        {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: "failure-domain.beta.kubernetes.io/zone"
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - {{ include "app.name" . }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - {{ include "app.name" . }}
